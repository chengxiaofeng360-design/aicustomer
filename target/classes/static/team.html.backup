<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>团队协作 - AI客户管理系统</title>
    <link href="/lib/bootstrap/bootstrap.min.css" rel="stylesheet">
    <link href="/lib/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="/css/common.css" rel="stylesheet">
</head>
<body>
    <div class="main-container">
        <!-- 页面头部 -->
        <div class="page-header">
            <div class="page-title">
                <i class="bi bi-people"></i> 团队协作
            </div>
            <a href="/" class="back-home-btn">
                <i class="bi bi-house-fill"></i> 返回首页
            </a>
        </div>
        
        <!-- 统计卡片 -->
        <div class="row mb-4">
            <div class="col-md-2">
                <div class="stats-card">
                    <div class="stats-number">8</div>
                    <div class="stats-label">团队成员</div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="stats-card">
                    <div class="stats-number">5</div>
                    <div class="stats-label">在线成员</div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="stats-card">
                    <div class="stats-number">24</div>
                    <div class="stats-label">进行中任务</div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="stats-card">
                    <div class="stats-number">156</div>
                    <div class="stats-label">已完成任务</div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="stats-card">
                    <div class="stats-number">92%</div>
                    <div class="stats-label">任务完成率</div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="stats-card">
                    <div class="stats-number">12</div>
                    <div class="stats-label">远程会议</div>
                </div>
            </div>
        </div>

        <!-- 远程办公工具栏 -->
        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="bi bi-laptop"></i> 远程办公工具
                </h5>
                <div class="d-flex gap-2">
                    <button class="btn btn-primary" onclick="showCreateMeetingModal()">
                        <i class="bi bi-camera-video"></i> 创建会议
                    </button>
                    <button class="btn btn-outline-primary" onclick="showOnlineMembers()">
                        <i class="bi bi-people-fill"></i> 在线成员
                    </button>
                    <button class="btn btn-outline-info" onclick="showRemoteTools()">
                        <i class="bi bi-tools"></i> 协作工具
                    </button>
                </div>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-3">
                        <div class="remote-tool-card" onclick="openVideoMeeting()">
                            <div class="tool-icon">
                                <i class="bi bi-camera-video-fill"></i>
                            </div>
                            <div class="tool-name">视频会议</div>
                            <div class="tool-status">Zoom, Teams</div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="remote-tool-card" onclick="openChat()">
                            <div class="tool-icon">
                                <i class="bi bi-chat-dots-fill"></i>
                            </div>
                            <div class="tool-name">即时通讯</div>
                            <div class="tool-status">Slack, 钉钉</div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="remote-tool-card" onclick="openDocument()">
                            <div class="tool-icon">
                                <i class="bi bi-file-earmark-text-fill"></i>
                            </div>
                            <div class="tool-name">文档协作</div>
                            <div class="tool-status">Google Docs, 腾讯文档</div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="remote-tool-card" onclick="openProjectManagement()">
                            <div class="tool-icon">
                                <i class="bi bi-kanban-fill"></i>
                            </div>
                            <div class="tool-name">项目管理</div>
                            <div class="tool-status">Trello, Asana</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- 团队成员管理 -->
        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">团队成员</h5>
                <div>
                    <button class="btn btn-primary" onclick="showAddMemberModal()">
                        <i class="bi bi-person-plus"></i> 添加成员
                    </button>
                    <button class="btn btn-outline-info" onclick="importMembers()">
                        <i class="bi bi-upload"></i> 导入
                    </button>
                    <button class="btn btn-outline-secondary" onclick="exportMembers()">
                        <i class="bi bi-download"></i> 导出
                    </button>
                </div>
            </div>
            <div class="card-body">
                <div class="team-members-container">
                    <div class="team-members-scroll" id="teamMembersList">
                        <!-- 团队成员将通过JavaScript动态加载 -->
                    </div>
                </div>
            </div>
        </div>

        <!-- 工作状态实时监控 -->
        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="bi bi-activity"></i> 工作状态实时监控
                </h5>
                <div>
                    <button class="btn btn-success" onclick="refreshWorkStatus()">
                        <i class="bi bi-arrow-clockwise"></i> 刷新状态
                    </button>
                    <button class="btn btn-outline-warning" onclick="showAbnormalWorkStatus()">
                        <i class="bi bi-exclamation-triangle"></i> 异常状态
                    </button>
                    <button class="btn btn-outline-info" onclick="showWorkStatusStats()">
                        <i class="bi bi-graph-up"></i> 状态统计
                    </button>
                </div>
            </div>
            <div class="card-body">
                <!-- 实时监控统计卡片 -->
                <div class="row mb-4">
                    <div class="col-md-2">
                        <div class="stats-card">
                            <div class="stats-number" id="totalEmployees">0</div>
                            <div class="stats-label">总员工数</div>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="stats-card">
                            <div class="stats-number" id="onlineEmployees">0</div>
                            <div class="stats-label">在线员工</div>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="stats-card">
                            <div class="stats-number" id="workingEmployees">0</div>
                            <div class="stats-label">工作中</div>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="stats-card">
                            <div class="stats-number" id="meetingEmployees">0</div>
                            <div class="stats-label">会议中</div>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="stats-card">
                            <div class="stats-number" id="awayEmployees">0</div>
                            <div class="stats-label">离开</div>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="stats-card">
                            <div class="stats-number" id="abnormalEmployees">0</div>
                            <div class="stats-label">异常状态</div>
                        </div>
                    </div>
                </div>
                
                <!-- 员工工作状态列表 -->
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>员工姓名</th>
                                <th>工作状态</th>
                                <th>工作模式</th>
                                <th>当前任务</th>
                                <th>工作地点</th>
                                <th>活动次数</th>
                                <th>最后活跃</th>
                                <th>网络状态</th>
                                <th>操作</th>
                            </tr>
                        </thead>
                        <tbody id="workStatusTableBody">
                            <!-- 工作状态记录将通过JavaScript动态加载 -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- 员工考勤管理 -->
        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="bi bi-clock-history"></i> 员工考勤管理
                </h5>
                <div>
                    <button class="btn btn-primary" onclick="showAttendanceStats()">
                        <i class="bi bi-graph-up"></i> 考勤统计
                    </button>
                    <button class="btn btn-outline-warning" onclick="showAbnormalAttendance()">
                        <i class="bi bi-exclamation-triangle"></i> 异常考勤
                    </button>
                    <button class="btn btn-outline-info" onclick="exportAttendance()">
                        <i class="bi bi-download"></i> 导出考勤
                    </button>
                </div>
            </div>
            <div class="card-body">
                <!-- 考勤统计卡片 -->
                <div class="row mb-4">
                    <div class="col-md-3">
                        <div class="stats-card">
                            <div class="stats-number" id="totalAttendance">0</div>
                            <div class="stats-label">总考勤次数</div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stats-card">
                            <div class="stats-number" id="normalAttendance">0</div>
                            <div class="stats-label">正常考勤</div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stats-card">
                            <div class="stats-number" id="abnormalAttendance">0</div>
                            <div class="stats-label">异常考勤</div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stats-card">
                            <div class="stats-number" id="attendanceRate">0%</div>
                            <div class="stats-label">出勤率</div>
                        </div>
                    </div>
                </div>
                
                <!-- 考勤记录列表 -->
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>员工姓名</th>
                                <th>考勤日期</th>
                                <th>上班时间</th>
                                <th>下班时间</th>
                                <th>工作时长</th>
                                <th>工作模式</th>
                                <th>考勤状态</th>
                                <th>工作地点</th>
                                <th>操作</th>
                            </tr>
                        </thead>
                        <tbody id="attendanceTableBody">
                            <!-- 考勤记录将通过JavaScript动态加载 -->
                        </tbody>
                    </table>
                </div>
                
                <!-- 分页 -->
                <nav aria-label="考勤记录分页">
                    <ul class="pagination justify-content-center" id="attendancePagination">
                        <!-- 分页将通过JavaScript动态生成 -->
                    </ul>
                </nav>
            </div>
        </div>

        <!-- 任务进度跟踪和汇报 -->
        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="bi bi-clipboard-data"></i> 任务进度跟踪和汇报
                </h5>
                <div>
                    <button class="btn btn-primary" onclick="showCreateReportModal()">
                        <i class="bi bi-plus"></i> 新建汇报
                    </button>
                    <button class="btn btn-outline-warning" onclick="showPendingReports()">
                        <i class="bi bi-clock"></i> 待审核
                    </button>
                    <button class="btn btn-outline-danger" onclick="showAbnormalReports()">
                        <i class="bi bi-exclamation-triangle"></i> 异常汇报
                    </button>
                    <button class="btn btn-outline-info" onclick="showReportStats()">
                        <i class="bi bi-graph-up"></i> 汇报统计
                    </button>
                </div>
            </div>
            <div class="card-body">
                <!-- 汇报统计卡片 -->
                <div class="row mb-4">
                    <div class="col-md-2">
                        <div class="stats-card">
                            <div class="stats-number" id="totalReports">0</div>
                            <div class="stats-label">总汇报数</div>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="stats-card">
                            <div class="stats-number" id="pendingReports">0</div>
                            <div class="stats-label">待审核</div>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="stats-card">
                            <div class="stats-number" id="approvedReports">0</div>
                            <div class="stats-label">已通过</div>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="stats-card">
                            <div class="stats-number" id="abnormalReports">0</div>
                            <div class="stats-label">异常汇报</div>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="stats-card">
                            <div class="stats-number" id="avgScore">0.0</div>
                            <div class="stats-label">平均评分</div>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="stats-card">
                            <div class="stats-number" id="reportRate">0%</div>
                            <div class="stats-label">汇报完成率</div>
                        </div>
                    </div>
                </div>
                
                <!-- 汇报列表 -->
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>任务名称</th>
                                <th>员工姓名</th>
                                <th>汇报类型</th>
                                <th>汇报标题</th>
                                <th>进度</th>
                                <th>工作时长</th>
                                <th>汇报状态</th>
                                <th>评分</th>
                                <th>创建时间</th>
                                <th>操作</th>
                            </tr>
                        </thead>
                        <tbody id="reportTableBody">
                            <!-- 汇报记录将通过JavaScript动态加载 -->
                        </tbody>
                    </table>
                </div>
                
                <!-- 分页 -->
                <nav aria-label="汇报记录分页">
                    <ul class="pagination justify-content-center" id="reportPagination">
                        <!-- 分页将通过JavaScript动态生成 -->
                    </ul>
                </nav>
            </div>
        </div>

        <!-- 任务管理 -->
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">团队任务</h5>
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-primary" onclick="filterTasks('all')">全部</button>
                    <button class="btn btn-outline-warning" onclick="filterTasks('pending')">进行中</button>
                    <button class="btn btn-outline-success" onclick="filterTasks('completed')">已完成</button>
                    <button class="btn btn-primary" onclick="showAddTaskModal()">
                        <i class="bi bi-plus"></i> 新建任务
                    </button>
                    <button class="btn btn-outline-info" onclick="importTasks()">
                        <i class="bi bi-upload"></i> 导入
                    </button>
                    <button class="btn btn-outline-secondary" onclick="exportTasks()">
                        <i class="bi bi-download"></i> 导出
                    </button>
                </div>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>任务名称</th>
                                <th>负责人</th>
                                <th>优先级</th>
                                <th>状态</th>
                                <th>截止日期</th>
                                <th>进度</th>
                                <th>操作</th>
                            </tr>
                        </thead>
                        <tbody id="taskTableBody">
                            <!-- 任务数据将通过JavaScript动态加载 -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- 添加/编辑成员模态框 -->
    <div class="modal fade" id="memberModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="memberModalTitle">添加成员</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="memberForm">
                        <input type="hidden" id="memberId" name="id">
                        <div class="mb-3">
                            <label class="form-label">姓名 *</label>
                            <input type="text" class="form-control" id="memberName" name="name" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">职位 *</label>
                            <input type="text" class="form-control" id="memberPosition" name="position" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">邮箱 *</label>
                            <input type="email" class="form-control" id="memberEmail" name="email" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">电话</label>
                            <input type="tel" class="form-control" id="memberPhone" name="phone">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">部门</label>
                            <select class="form-select" id="memberDepartment" name="department">
                                <option value="">请选择</option>
                                <option value="销售部">销售部</option>
                                <option value="技术部">技术部</option>
                                <option value="客服部">客服部</option>
                                <option value="市场部">市场部</option>
                                <option value="行政部">行政部</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">角色</label>
                            <select class="form-select" id="memberRole" name="role">
                                <option value="">请选择</option>
                                <option value="管理员">管理员</option>
                                <option value="普通用户">普通用户</option>
                                <option value="只读用户">只读用户</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">工作模式</label>
                            <select class="form-select" id="memberWorkMode" name="workMode">
                                <option value="">请选择</option>
                                <option value="1">办公室</option>
                                <option value="2">远程</option>
                                <option value="3">混合</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">时区</label>
                            <select class="form-select" id="memberTimezone" name="timezone">
                                <option value="">请选择</option>
                                <option value="Asia/Shanghai">北京时间 (UTC+8)</option>
                                <option value="America/New_York">纽约时间 (UTC-5)</option>
                                <option value="Europe/London">伦敦时间 (UTC+0)</option>
                                <option value="Asia/Tokyo">东京时间 (UTC+9)</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">协作工具偏好</label>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="toolZoom" name="tools" value="zoom">
                                <label class="form-check-label" for="toolZoom">Zoom</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="toolTeams" name="tools" value="teams">
                                <label class="form-check-label" for="toolTeams">Microsoft Teams</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="toolSlack" name="tools" value="slack">
                                <label class="form-check-label" for="toolSlack">Slack</label>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                    <button type="button" class="btn btn-primary" onclick="saveMember()">保存</button>
                </div>
            </div>
        </div>
    </div>

    <!-- 添加/编辑任务模态框 -->
    <div class="modal fade" id="taskModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="taskModalTitle">新建任务</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="taskForm">
                        <input type="hidden" id="taskId" name="id">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">任务名称 *</label>
                                    <input type="text" class="form-control" id="taskName" name="name" required>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">负责人 *</label>
                                    <select class="form-select" id="taskAssignee" name="assignee" required>
                                        <option value="">请选择负责人</option>
                                        <!-- 选项将通过JavaScript动态加载 -->
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">优先级 *</label>
                                    <select class="form-select" id="taskPriority" name="priority" required>
                                        <option value="">请选择优先级</option>
                                        <option value="high">高</option>
                                        <option value="medium">中</option>
                                        <option value="low">低</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">截止日期 *</label>
                                    <input type="date" class="form-control" id="taskDueDate" name="dueDate" required>
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">任务描述</label>
                            <textarea class="form-control" id="taskDescription" name="description" rows="3"></textarea>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">进度 (%)</label>
                            <input type="number" class="form-control" id="taskProgress" name="progress" min="0" max="100" value="0">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                    <button type="button" class="btn btn-primary" onclick="saveTask()">保存</button>
                </div>
            </div>
        </div>
    </div>

    <!-- 创建任务进度汇报模态框 -->
    <div class="modal fade" id="reportModal" tabindex="-1">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="reportModalTitle">新建任务进度汇报</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="reportForm">
                        <input type="hidden" id="reportId" name="id">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">任务名称 *</label>
                                    <select class="form-select" id="reportTaskId" name="taskId" required>
                                        <option value="">请选择任务</option>
                                        <!-- 选项将通过JavaScript动态加载 -->
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">汇报类型 *</label>
                                    <select class="form-select" id="reportType" name="reportType" required>
                                        <option value="">请选择汇报类型</option>
                                        <option value="1">日报</option>
                                        <option value="2">周报</option>
                                        <option value="3">月报</option>
                                        <option value="4">项目汇报</option>
                                        <option value="5">紧急汇报</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">汇报标题 *</label>
                            <input type="text" class="form-control" id="reportTitle" name="reportTitle" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">汇报内容 *</label>
                            <textarea class="form-control" id="reportContent" name="reportContent" rows="4" required></textarea>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">完成进度 (%) *</label>
                                    <input type="number" class="form-control" id="reportProgress" name="progress" min="0" max="100" required>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">工作时长 (分钟)</label>
                                    <input type="number" class="form-control" id="reportWorkDuration" name="workDuration" min="0">
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">工作模式</label>
                                    <select class="form-select" id="reportWorkMode" name="workMode">
                                        <option value="">请选择</option>
                                        <option value="1">办公室</option>
                                        <option value="2">远程</option>
                                        <option value="3">混合</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">工作成果</label>
                            <textarea class="form-control" id="reportWorkResults" name="workResults" rows="2"></textarea>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">遇到的问题</label>
                            <textarea class="form-control" id="reportProblems" name="problems" rows="2"></textarea>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">解决方案</label>
                            <textarea class="form-control" id="reportSolutions" name="solutions" rows="2"></textarea>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">下一步计划</label>
                            <textarea class="form-control" id="reportNextPlan" name="nextPlan" rows="2"></textarea>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">需要支持</label>
                            <textarea class="form-control" id="reportSupportNeeded" name="supportNeeded" rows="2"></textarea>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">工作地点</label>
                            <input type="text" class="form-control" id="reportWorkLocation" name="workLocation">
                        </div>
                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="reportIsAbnormal" name="isAbnormal">
                                <label class="form-check-label" for="reportIsAbnormal">标记为异常汇报</label>
                            </div>
                        </div>
                        <div class="mb-3" id="abnormalReasonDiv" style="display: none;">
                            <label class="form-label">异常原因</label>
                            <textarea class="form-control" id="reportAbnormalReason" name="abnormalReason" rows="2"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                    <button type="button" class="btn btn-primary" onclick="saveReport()">保存汇报</button>
                </div>
            </div>
        </div>
    </div>

    <!-- 审核汇报模态框 -->
    <div class="modal fade" id="reviewModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">审核任务进度汇报</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="reviewForm">
                        <input type="hidden" id="reviewReportId" name="reportId">
                        <div class="mb-3">
                            <label class="form-label">审核结果 *</label>
                            <select class="form-select" id="reviewStatus" name="reportStatus" required>
                                <option value="">请选择审核结果</option>
                                <option value="2">通过</option>
                                <option value="3">需修改</option>
                                <option value="4">驳回</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">审核意见</label>
                            <textarea class="form-control" id="reviewComment" name="reviewComment" rows="3"></textarea>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">质量评分 (1-5分)</label>
                                    <input type="number" class="form-control" id="reviewQualityScore" name="qualityScore" min="1" max="5">
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">效率评分 (1-5分)</label>
                                    <input type="number" class="form-control" id="reviewEfficiencyScore" name="efficiencyScore" min="1" max="5">
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">态度评分 (1-5分)</label>
                                    <input type="number" class="form-control" id="reviewAttitudeScore" name="attitudeScore" min="1" max="5">
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                    <button type="button" class="btn btn-primary" onclick="submitReview()">提交审核</button>
                </div>
            </div>
        </div>
    </div>

    <!-- 创建会议模态框 -->
    <div class="modal fade" id="meetingModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="meetingModalTitle">创建远程会议</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="meetingForm">
                        <input type="hidden" id="meetingId" name="id">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">会议标题 *</label>
                                    <input type="text" class="form-control" id="meetingTitle" name="title" required>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">会议类型 *</label>
                                    <select class="form-select" id="meetingType" name="type" required>
                                        <option value="">请选择</option>
                                        <option value="1">团队会议</option>
                                        <option value="2">客户会议</option>
                                        <option value="3">项目讨论</option>
                                        <option value="4">培训</option>
                                        <option value="5">其他</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">开始时间 *</label>
                                    <input type="datetime-local" class="form-control" id="meetingStartTime" name="startTime" required>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">预计时长 (分钟)</label>
                                    <input type="number" class="form-control" id="meetingDuration" name="duration" min="15" max="480" value="60">
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">会议工具</label>
                            <select class="form-select" id="meetingTool" name="tool">
                                <option value="zoom">Zoom</option>
                                <option value="teams">Microsoft Teams</option>
                                <option value="skype">Skype</option>
                                <option value="webex">Webex</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">参会人员</label>
                            <div class="participant-list" id="participantList">
                                <!-- 参会人员将通过JavaScript动态添加 -->
                            </div>
                            <button type="button" class="btn btn-outline-primary btn-sm" onclick="addParticipant()">
                                <i class="bi bi-person-plus"></i> 添加参会人员
                            </button>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">会议描述</label>
                            <textarea class="form-control" id="meetingDescription" name="description" rows="3"></textarea>
                        </div>
                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="meetingRecord" name="record">
                                <label class="form-check-label" for="meetingRecord">录制会议</label>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                    <button type="button" class="btn btn-primary" onclick="saveMeeting()">创建会议</button>
                </div>
            </div>
        </div>
    </div>

    <style>
        /* 远程办公工具卡片样式 */
        .remote-tool-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 15px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 15px;
            height: 120px;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }

        .remote-tool-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0,0,0,0.2);
        }

        .tool-icon {
            font-size: 2rem;
            margin-bottom: 10px;
        }

        .tool-name {
            font-size: 1.1rem;
            font-weight: 600;
            margin-bottom: 5px;
        }

        .tool-status {
            font-size: 0.9rem;
            opacity: 0.8;
        }

        /* 团队成员卡片增强样式 */
        .team-member-card {
            background: white;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 15px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            border: 1px solid #e9ecef;
        }

        .team-member-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        }

        .member-avatar {
            position: relative;
            display: inline-block;
        }

        .member-avatar img {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            object-fit: cover;
        }

        .online-indicator {
            position: absolute;
            bottom: 2px;
            right: 2px;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            border: 2px solid white;
        }

        .member-status {
            margin-top: 8px;
        }

        .member-status .badge {
            font-size: 0.75rem;
        }

        /* 参会人员列表样式 */
        .participant-item {
            background: #f8f9fa;
            padding: 10px;
            border-radius: 8px;
            border: 1px solid #e9ecef;
        }

        .participant-item:hover {
            background: #e9ecef;
        }

        /* 统计卡片增强样式 */
        .stats-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 15px;
            text-align: center;
            transition: all 0.3s ease;
        }

        .stats-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.2);
        }

        .stats-number {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 5px;
        }

        .stats-label {
            font-size: 0.9rem;
            opacity: 0.9;
        }

        /* 响应式设计 */
        @media (max-width: 768px) {
            .remote-tool-card {
                height: 100px;
                padding: 15px;
            }
            
            .tool-icon {
                font-size: 1.5rem;
            }
            
            .tool-name {
                font-size: 1rem;
            }
            
            .stats-number {
                font-size: 1.5rem;
            }
        }
    </style>

    <script src="/lib/bootstrap/bootstrap.bundle.min.js"></script>
    <script>
        // 模拟团队成员数据
        let teamMembers = [
            {
                id: 1,
                name: '张三',
                position: '销售经理',
                email: 'zhangsan@company.com',
                phone: '13800138001',
                department: '销售部',
                role: '管理员',
                avatar: 'https://via.placeholder.com/40',
                workMode: 1, // 1:办公室, 2:远程, 3:混合
                onlineStatus: 1, // 1:在线, 2:忙碌, 3:离开, 4:离线
                timezone: 'Asia/Shanghai',
                tools: ['zoom', 'teams'],
                lastOnlineTime: new Date()
            },
            {
                id: 2,
                name: '李四',
                position: '技术总监',
                email: 'lisi@company.com',
                phone: '13800138002',
                department: '技术部',
                role: '管理员',
                avatar: 'https://via.placeholder.com/40',
                workMode: 2, // 远程办公
                onlineStatus: 1,
                timezone: 'Asia/Shanghai',
                tools: ['zoom', 'slack'],
                lastOnlineTime: new Date()
            },
            {
                id: 3,
                name: '王五',
                position: '客服专员',
                email: 'wangwu@company.com',
                phone: '13800138003',
                department: '客服部',
                role: '普通用户',
                avatar: 'https://via.placeholder.com/40',
                workMode: 3, // 混合办公
                onlineStatus: 2, // 忙碌
                timezone: 'Asia/Shanghai',
                tools: ['teams'],
                lastOnlineTime: new Date()
            }
        ];

        // 模拟任务数据
        let tasks = [
            {
                id: 1,
                name: '客户需求分析',
                assignee: '张三',
                priority: 'high',
                status: 'pending',
                dueDate: '2024-01-30',
                progress: 60,
                description: '分析客户需求，制定解决方案'
            },
            {
                id: 2,
                name: '系统优化',
                assignee: '李四',
                priority: 'medium',
                status: 'completed',
                dueDate: '2024-01-25',
                progress: 100,
                description: '优化系统性能，提升用户体验'
            },
            {
                id: 3,
                name: '客户培训',
                assignee: '王五',
                priority: 'low',
                status: 'pending',
                dueDate: '2024-02-05',
                progress: 30,
                description: '为客户提供产品使用培训'
            }
        ];

        let currentTaskFilter = 'all';

        // ========== 工作状态实时监控功能 ==========
        
        // 工作状态数据
        let workStatusData = [];
        
        // 加载工作状态数据
        async function loadWorkStatusData() {
            try {
                const response = await fetch('/api/work-status/all');
                const result = await response.json();
                
                if (result.code === 200) {
                    workStatusData = result.data;
                    renderWorkStatusTable();
                    loadWorkStatusStats();
                } else {
                    console.error('加载工作状态数据失败:', result.message);
                    // 使用假数据
                    loadMockWorkStatusData();
                }
            } catch (error) {
                console.error('加载工作状态数据失败:', error);
                // 使用假数据
                loadMockWorkStatusData();
            }
        }
        
        // 加载假工作状态数据
        function loadMockWorkStatusData() {
            workStatusData = [
                {
                    id: 1,
                    employeeId: 1,
                    employeeName: '张三',
                    workStatus: 1,
                    workMode: 1,
                    currentTaskId: 1,
                    currentTaskName: '客户需求分析',
                    workLocation: '办公室A区',
                    activityCount: 1250,
                    lastActiveTime: '2024-01-15 10:30:00',
                    isOnline: true,
                    networkStatus: 'WiFi',
                    deviceInfo: 'Windows 10',
                    isAbnormal: false
                },
                {
                    id: 2,
                    employeeId: 2,
                    employeeName: '李四',
                    workStatus: 1,
                    workMode: 1,
                    currentTaskId: 2,
                    currentTaskName: 'UI设计优化',
                    workLocation: '办公室B区',
                    activityCount: 980,
                    lastActiveTime: '2024-01-15 10:25:00',
                    isOnline: true,
                    networkStatus: 'WiFi',
                    deviceInfo: 'macOS',
                    isAbnormal: false
                },
                {
                    id: 3,
                    employeeId: 3,
                    employeeName: '王五',
                    workStatus: 3,
                    workMode: 1,
                    currentTaskId: 3,
                    currentTaskName: '项目管理会议',
                    workLocation: '办公室C区',
                    activityCount: 450,
                    lastActiveTime: '2024-01-15 10:20:00',
                    isOnline: true,
                    networkStatus: 'WiFi',
                    deviceInfo: 'Windows 10',
                    isAbnormal: false
                },
                {
                    id: 4,
                    employeeId: 4,
                    employeeName: '赵六',
                    workStatus: 1,
                    workMode: 2,
                    currentTaskId: 4,
                    currentTaskName: '数据库优化',
                    workLocation: '家中',
                    activityCount: 1100,
                    lastActiveTime: '2024-01-15 10:35:00',
                    isOnline: true,
                    networkStatus: '4G',
                    deviceInfo: 'Windows 10',
                    isAbnormal: false
                },
                {
                    id: 5,
                    employeeId: 5,
                    employeeName: '孙七',
                    workStatus: 2,
                    workMode: 1,
                    currentTaskId: 5,
                    currentTaskName: '测试用例编写',
                    workLocation: '办公室E区',
                    activityCount: 320,
                    lastActiveTime: '2024-01-15 10:15:00',
                    isOnline: true,
                    networkStatus: 'WiFi',
                    deviceInfo: 'Ubuntu',
                    isAbnormal: false
                },
                {
                    id: 6,
                    employeeId: 6,
                    employeeName: '周八',
                    workStatus: 5,
                    workMode: 2,
                    currentTaskId: null,
                    currentTaskName: null,
                    workLocation: '家中',
                    activityCount: 0,
                    lastActiveTime: '2024-01-15 09:45:00',
                    isOnline: false,
                    networkStatus: '4G',
                    deviceInfo: 'Windows 10',
                    isAbnormal: false
                },
                {
                    id: 7,
                    employeeId: 7,
                    employeeName: '吴九',
                    workStatus: 1,
                    workMode: 1,
                    currentTaskId: 6,
                    currentTaskName: '代码审查',
                    workLocation: '办公室F区',
                    activityCount: 1350,
                    lastActiveTime: '2024-01-15 10:40:00',
                    isOnline: true,
                    networkStatus: 'WiFi',
                    deviceInfo: 'macOS',
                    isAbnormal: false
                },
                {
                    id: 8,
                    employeeId: 8,
                    employeeName: '郑十',
                    workStatus: 4,
                    workMode: 1,
                    currentTaskId: null,
                    currentTaskName: null,
                    workLocation: '办公室G区',
                    activityCount: 150,
                    lastActiveTime: '2024-01-15 10:10:00',
                    isOnline: true,
                    networkStatus: 'WiFi',
                    deviceInfo: 'Windows 10',
                    isAbnormal: true,
                    abnormalReason: '长时间无活动'
                }
            ];
            renderWorkStatusTable();
            loadWorkStatusStats();
        }
        
        // 渲染工作状态表格
        function renderWorkStatusTable() {
            const tbody = document.getElementById('workStatusTableBody');
            tbody.innerHTML = '';
            
            workStatusData.forEach(status => {
                const row = document.createElement('tr');
                const statusClass = getWorkStatusClass(status.workStatus);
                const workModeText = getWorkModeText(status.workMode);
                const onlineClass = status.isOnline ? 'text-success' : 'text-danger';
                const abnormalClass = status.isAbnormal ? 'text-warning' : '';
                
                row.innerHTML = `
                    <td class="${abnormalClass}">${status.employeeName}</td>
                    <td><span class="badge ${statusClass}">${getWorkStatusText(status.workStatus)}</span></td>
                    <td>${workModeText}</td>
                    <td>${status.currentTaskName || '-'}</td>
                    <td>${status.workLocation || '-'}</td>
                    <td>${status.activityCount || 0}</td>
                    <td class="${onlineClass}">${status.lastActiveTime ? status.lastActiveTime.split(' ')[1] : '-'}</td>
                    <td>${status.networkStatus || '-'}</td>
                    <td>
                        <button class="btn btn-outline-info btn-sm" onclick="viewWorkStatusDetail(${status.id})" title="查看详情">
                            <i class="bi bi-eye"></i>
                        </button>
                        ${status.isAbnormal ? `
                            <button class="btn btn-outline-warning btn-sm" onclick="superviseWorkStatus(${status.id})" title="监督处理">
                                <i class="bi bi-shield-check"></i>
                            </button>
                        ` : ''}
                        <button class="btn btn-outline-success btn-sm" onclick="updateWorkStatus(${status.id})" title="更新状态">
                            <i class="bi bi-arrow-clockwise"></i>
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }
        
        // 获取工作状态样式类
        function getWorkStatusClass(status) {
            switch (status) {
                case 1: return 'bg-success'; // 工作中
                case 2: return 'bg-info';    // 休息中
                case 3: return 'bg-warning'; // 会议中
                case 4: return 'bg-secondary'; // 离开
                case 5: return 'bg-danger';   // 离线
                default: return 'bg-secondary';
            }
        }
        
        // 获取工作状态文本
        function getWorkStatusText(status) {
            switch (status) {
                case 1: return '工作中';
                case 2: return '休息中';
                case 3: return '会议中';
                case 4: return '离开';
                case 5: return '离线';
                default: return '未知';
            }
        }
        
        // 加载工作状态统计
        function loadWorkStatusStats() {
            const totalEmployees = workStatusData.length;
            const onlineEmployees = workStatusData.filter(s => s.isOnline).length;
            const workingEmployees = workStatusData.filter(s => s.workStatus === 1).length;
            const meetingEmployees = workStatusData.filter(s => s.workStatus === 3).length;
            const awayEmployees = workStatusData.filter(s => s.workStatus === 4).length;
            const abnormalEmployees = workStatusData.filter(s => s.isAbnormal).length;
            
            document.getElementById('totalEmployees').textContent = totalEmployees;
            document.getElementById('onlineEmployees').textContent = onlineEmployees;
            document.getElementById('workingEmployees').textContent = workingEmployees;
            document.getElementById('meetingEmployees').textContent = meetingEmployees;
            document.getElementById('awayEmployees').textContent = awayEmployees;
            document.getElementById('abnormalEmployees').textContent = abnormalEmployees;
        }
        
        // 查看工作状态详情
        function viewWorkStatusDetail(statusId) {
            const status = workStatusData.find(s => s.id === statusId);
            if (status) {
                let detailHtml = `
                    <div class="work-status-detail">
                        <h6>工作状态详情</h6>
                        <p><strong>员工姓名:</strong> ${status.employeeName}</p>
                        <p><strong>工作状态:</strong> <span class="badge ${getWorkStatusClass(status.workStatus)}">${getWorkStatusText(status.workStatus)}</span></p>
                        <p><strong>工作模式:</strong> ${getWorkModeText(status.workMode)}</p>
                        <p><strong>当前任务:</strong> ${status.currentTaskName || '无'}</p>
                        <p><strong>工作地点:</strong> ${status.workLocation || '-'}</p>
                        <p><strong>活动次数:</strong> ${status.activityCount || 0}</p>
                        <p><strong>最后活跃:</strong> ${status.lastActiveTime || '-'}</p>
                        <p><strong>在线状态:</strong> ${status.isOnline ? '在线' : '离线'}</p>
                        <p><strong>网络状态:</strong> ${status.networkStatus || '-'}</p>
                        <p><strong>设备信息:</strong> ${status.deviceInfo || '-'}</p>
                `;
                
                if (status.isAbnormal) {
                    detailHtml += `
                        <p><strong>异常原因:</strong> ${status.abnormalReason || '-'}</p>
                    `;
                }
                
                detailHtml += '</div>';
                
                alert(detailHtml.replace(/<[^>]*>/g, '')); // 简单显示，去掉HTML标签
            }
        }
        
        // 监督工作状态
        function superviseWorkStatus(statusId) {
            const status = workStatusData.find(s => s.id === statusId);
            if (status) {
                const supervisionNote = prompt('请输入监督备注:');
                if (supervisionNote) {
                    // 这里可以调用API进行监督处理
                    console.log('监督工作状态:', statusId, supervisionNote);
                    alert('监督处理完成！');
                    loadWorkStatusData(); // 重新加载数据
                }
            }
        }
        
        // 更新工作状态
        function updateWorkStatus(statusId) {
            const status = workStatusData.find(s => s.id === statusId);
            if (status) {
                const newStatus = prompt('请选择新的工作状态:\n1-工作中\n2-休息中\n3-会议中\n4-离开\n5-离线');
                if (newStatus && newStatus >= 1 && newStatus <= 5) {
                    // 这里可以调用API更新工作状态
                    console.log('更新工作状态:', statusId, newStatus);
                    alert('工作状态更新成功！');
                    loadWorkStatusData(); // 重新加载数据
                }
            }
        }
        
        // 刷新工作状态
        function refreshWorkStatus() {
            loadWorkStatusData();
            alert('工作状态已刷新！');
        }
        
        // 显示异常工作状态
        function showAbnormalWorkStatus() {
            const abnormalData = workStatusData.filter(s => s.isAbnormal);
            if (abnormalData.length === 0) {
                alert('暂无异常工作状态');
                return;
            }
            
            let abnormalHtml = '异常工作状态:\n\n';
            abnormalData.forEach(status => {
                abnormalHtml += `${status.employeeName} - ${getWorkStatusText(status.workStatus)} - ${status.abnormalReason}\n`;
            });
            
            alert(abnormalHtml);
        }
        
        // 显示工作状态统计
        function showWorkStatusStats() {
            alert('工作状态统计功能开发中...');
        }
        
        // ========== 任务进度跟踪和汇报功能 ==========
        
        // 任务进度汇报数据
        let reportData = [];
        let currentReportPage = 1;
        const reportPageSize = 10;
        
        // 加载任务进度汇报数据
        async function loadReportData() {
            try {
                const response = await fetch('/api/task-progress/reports?page=' + currentReportPage + '&size=' + reportPageSize);
                const result = await response.json();
                
                if (result.code === 200) {
                    reportData = result.data;
                    renderReportTable();
                    loadReportStats();
                } else {
                    console.error('加载任务进度汇报数据失败:', result.message);
                    // 使用假数据
                    loadMockReportData();
                }
            } catch (error) {
                console.error('加载任务进度汇报数据失败:', error);
                // 使用假数据
                loadMockReportData();
            }
        }
        
        // 加载假任务进度汇报数据
        function loadMockReportData() {
            reportData = [
                {
                    id: 1,
                    taskId: 1,
                    taskName: '客户需求分析',
                    employeeId: 1,
                    employeeName: '张三',
                    reportType: 1,
                    reportTitle: '客户需求分析日报',
                    reportContent: '今日完成了ABC科技公司的需求调研，收集了客户的主要业务需求和技术要求。',
                    progress: 60,
                    workDuration: 480,
                    workResults: '完成需求调研报告初稿',
                    problems: '客户对某些技术细节不够明确',
                    solutions: '已安排技术专家进行详细沟通',
                    nextPlan: '明日完成需求文档的最终版本',
                    supportNeeded: '需要技术团队支持',
                    workLocation: '办公室A区',
                    workMode: 1,
                    reportStatus: 2,
                    qualityScore: 4,
                    efficiencyScore: 4,
                    attitudeScore: 4,
                    overallScore: 4.0,
                    isAbnormal: false,
                    createTime: '2024-01-15 18:00:00'
                },
                {
                    id: 2,
                    taskId: 2,
                    taskName: 'UI设计优化',
                    employeeId: 2,
                    employeeName: '李四',
                    reportType: 1,
                    reportTitle: 'UI设计优化日报',
                    reportContent: '今日完成了登录页面的UI设计优化，提升了用户体验。',
                    progress: 80,
                    workDuration: 450,
                    workResults: '完成登录页面设计',
                    problems: '部分交互细节需要调整',
                    solutions: '已与产品经理沟通确认',
                    nextPlan: '明日完成注册页面设计',
                    supportNeeded: '需要产品经理确认交互流程',
                    workLocation: '办公室B区',
                    workMode: 1,
                    reportStatus: 2,
                    qualityScore: 4,
                    efficiencyScore: 4,
                    attitudeScore: 4,
                    overallScore: 4.0,
                    isAbnormal: false,
                    createTime: '2024-01-15 17:30:00'
                },
                {
                    id: 3,
                    taskId: 3,
                    taskName: '项目管理会议',
                    employeeId: 3,
                    employeeName: '王五',
                    reportType: 1,
                    reportTitle: '项目管理会议日报',
                    reportContent: '今日组织了项目进度评审会议，协调了各团队的工作安排。',
                    progress: 70,
                    workDuration: 360,
                    workResults: '完成项目进度评审',
                    problems: '部分团队成员时间冲突',
                    solutions: '已重新安排会议时间',
                    nextPlan: '明日进行资源分配优化',
                    supportNeeded: '需要各部门配合',
                    workLocation: '办公室C区',
                    workMode: 1,
                    reportStatus: 1,
                    qualityScore: null,
                    efficiencyScore: null,
                    attitudeScore: null,
                    overallScore: null,
                    isAbnormal: false,
                    createTime: '2024-01-15 16:45:00'
                },
                {
                    id: 4,
                    taskId: 4,
                    taskName: '数据库优化',
                    employeeId: 4,
                    employeeName: '赵六',
                    reportType: 1,
                    reportTitle: '数据库优化日报',
                    reportContent: '今日完成了数据库查询优化，提升了系统性能。',
                    progress: 90,
                    workDuration: 480,
                    workResults: '完成查询优化',
                    problems: '部分复杂查询仍需优化',
                    solutions: '已制定进一步优化方案',
                    nextPlan: '明日进行索引优化',
                    supportNeeded: '需要DBA支持',
                    workLocation: '家中',
                    workMode: 2,
                    reportStatus: 2,
                    qualityScore: 5,
                    efficiencyScore: 4,
                    attitudeScore: 4,
                    overallScore: 4.3,
                    isAbnormal: false,
                    createTime: '2024-01-15 18:15:00'
                },
                {
                    id: 5,
                    taskId: 1,
                    taskName: '客户需求分析',
                    employeeId: 1,
                    employeeName: '张三',
                    reportType: 5,
                    reportTitle: '紧急汇报：客户需求变更',
                    reportContent: '客户突然提出新的需求变更，需要紧急处理。',
                    progress: 50,
                    workDuration: 120,
                    workResults: '分析新需求影响',
                    problems: '需求变更影响较大',
                    solutions: '已与客户沟通确认',
                    nextPlan: '明日重新制定方案',
                    supportNeeded: '需要技术团队支持',
                    workLocation: '办公室A区',
                    workMode: 1,
                    reportStatus: 1,
                    qualityScore: null,
                    efficiencyScore: null,
                    attitudeScore: null,
                    overallScore: null,
                    isAbnormal: true,
                    abnormalReason: '客户需求变更频繁',
                    createTime: '2024-01-15 19:00:00'
                }
            ];
            renderReportTable();
            loadReportStats();
        }
        
        // 渲染任务进度汇报表格
        function renderReportTable() {
            const tbody = document.getElementById('reportTableBody');
            tbody.innerHTML = '';
            
            reportData.forEach(report => {
                const row = document.createElement('tr');
                const statusClass = getReportStatusClass(report.reportStatus);
                const reportTypeText = getReportTypeText(report.reportType);
                const workModeText = getWorkModeText(report.workMode);
                const abnormalClass = report.isAbnormal ? 'text-warning' : '';
                
                row.innerHTML = `
                    <td class="${abnormalClass}">${report.taskName}</td>
                    <td>${report.employeeName}</td>
                    <td><span class="badge bg-info">${reportTypeText}</span></td>
                    <td class="table-cell-truncate" title="${report.reportTitle}">${report.reportTitle}</td>
                    <td>
                        <div class="progress" style="height: 20px;">
                            <div class="progress-bar" role="progressbar" style="width: ${report.progress}%">${report.progress}%</div>
                        </div>
                    </td>
                    <td>${report.workDuration ? Math.floor(report.workDuration / 60) + '小时' + (report.workDuration % 60) + '分钟' : '-'}</td>
                    <td><span class="badge ${statusClass}">${getReportStatusText(report.reportStatus)}</span></td>
                    <td>${report.overallScore ? report.overallScore.toFixed(1) : '-'}</td>
                    <td>${report.createTime ? report.createTime.split(' ')[0] : '-'}</td>
                    <td>
                        <button class="btn btn-outline-info btn-sm" onclick="viewReportDetail(${report.id})" title="查看详情">
                            <i class="bi bi-eye"></i>
                        </button>
                        ${report.reportStatus === 1 ? `
                            <button class="btn btn-outline-success btn-sm" onclick="reviewReport(${report.id})" title="审核">
                                <i class="bi bi-check-circle"></i>
                            </button>
                        ` : ''}
                        ${report.isAbnormal ? `
                            <button class="btn btn-outline-warning btn-sm" onclick="superviseReport(${report.id})" title="监督处理">
                                <i class="bi bi-shield-check"></i>
                            </button>
                        ` : ''}
                        <button class="btn btn-outline-primary btn-sm" onclick="editReport(${report.id})" title="编辑">
                            <i class="bi bi-pencil"></i>
                        </button>
                        <button class="btn btn-outline-danger btn-sm" onclick="deleteReport(${report.id})" title="删除">
                            <i class="bi bi-trash"></i>
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }
        
        // 获取汇报状态样式类
        function getReportStatusClass(status) {
            switch (status) {
                case 1: return 'bg-warning'; // 待审核
                case 2: return 'bg-success'; // 已通过
                case 3: return 'bg-info';    // 需修改
                case 4: return 'bg-danger'; // 已驳回
                default: return 'bg-secondary';
            }
        }
        
        // 获取汇报状态文本
        function getReportStatusText(status) {
            switch (status) {
                case 1: return '待审核';
                case 2: return '已通过';
                case 3: return '需修改';
                case 4: return '已驳回';
                default: return '未知';
            }
        }
        
        // 获取汇报类型文本
        function getReportTypeText(type) {
            switch (type) {
                case 1: return '日报';
                case 2: return '周报';
                case 3: return '月报';
                case 4: return '项目汇报';
                case 5: return '紧急汇报';
                default: return '未知';
            }
        }
        
        // 加载汇报统计
        function loadReportStats() {
            const totalReports = reportData.length;
            const pendingReports = reportData.filter(r => r.reportStatus === 1).length;
            const approvedReports = reportData.filter(r => r.reportStatus === 2).length;
            const abnormalReports = reportData.filter(r => r.isAbnormal).length;
            
            // 计算平均评分
            const scoredReports = reportData.filter(r => r.overallScore != null);
            const avgScore = scoredReports.length > 0 ? 
                scoredReports.reduce((sum, r) => sum + r.overallScore, 0) / scoredReports.length : 0;
            
            // 计算汇报完成率
            const reportRate = totalReports > 0 ? Math.round((approvedReports / totalReports) * 100) : 0;
            
            document.getElementById('totalReports').textContent = totalReports;
            document.getElementById('pendingReports').textContent = pendingReports;
            document.getElementById('approvedReports').textContent = approvedReports;
            document.getElementById('abnormalReports').textContent = abnormalReports;
            document.getElementById('avgScore').textContent = avgScore.toFixed(1);
            document.getElementById('reportRate').textContent = reportRate + '%';
        }
        
        // 查看汇报详情
        function viewReportDetail(reportId) {
            const report = reportData.find(r => r.id === reportId);
            if (report) {
                let detailHtml = `
                    <div class="report-detail">
                        <h6>任务进度汇报详情</h6>
                        <p><strong>任务名称:</strong> ${report.taskName}</p>
                        <p><strong>员工姓名:</strong> ${report.employeeName}</p>
                        <p><strong>汇报类型:</strong> ${getReportTypeText(report.reportType)}</p>
                        <p><strong>汇报标题:</strong> ${report.reportTitle}</p>
                        <p><strong>汇报内容:</strong> ${report.reportContent}</p>
                        <p><strong>完成进度:</strong> ${report.progress}%</p>
                        <p><strong>工作时长:</strong> ${report.workDuration ? Math.floor(report.workDuration / 60) + '小时' + (report.workDuration % 60) + '分钟' : '-'}</p>
                        <p><strong>工作成果:</strong> ${report.workResults || '-'}</p>
                        <p><strong>遇到的问题:</strong> ${report.problems || '-'}</p>
                        <p><strong>解决方案:</strong> ${report.solutions || '-'}</p>
                        <p><strong>下一步计划:</strong> ${report.nextPlan || '-'}</p>
                        <p><strong>需要支持:</strong> ${report.supportNeeded || '-'}</p>
                        <p><strong>工作地点:</strong> ${report.workLocation || '-'}</p>
                        <p><strong>工作模式:</strong> ${getWorkModeText(report.workMode)}</p>
                        <p><strong>汇报状态:</strong> <span class="badge ${getReportStatusClass(report.reportStatus)}">${getReportStatusText(report.reportStatus)}</span></p>
                `;
                
                if (report.overallScore) {
                    detailHtml += `
                        <p><strong>质量评分:</strong> ${report.qualityScore || '-'}</p>
                        <p><strong>效率评分:</strong> ${report.efficiencyScore || '-'}</p>
                        <p><strong>态度评分:</strong> ${report.attitudeScore || '-'}</p>
                        <p><strong>综合评分:</strong> ${report.overallScore.toFixed(1)}</p>
                    `;
                }
                
                if (report.isAbnormal) {
                    detailHtml += `
                        <p><strong>异常原因:</strong> ${report.abnormalReason || '-'}</p>
                    `;
                }
                
                detailHtml += '</div>';
                
                alert(detailHtml.replace(/<[^>]*>/g, '')); // 简单显示，去掉HTML标签
            }
        }
        
        // 审核汇报
        function reviewReport(reportId) {
            const report = reportData.find(r => r.id === reportId);
            if (report) {
                document.getElementById('reviewReportId').value = reportId;
                document.getElementById('reviewStatus').value = '';
                document.getElementById('reviewComment').value = '';
                document.getElementById('reviewQualityScore').value = '';
                document.getElementById('reviewEfficiencyScore').value = '';
                document.getElementById('reviewAttitudeScore').value = '';
                new bootstrap.Modal(document.getElementById('reviewModal')).show();
            }
        }
        
        // 提交审核
        function submitReview() {
            const reportId = document.getElementById('reviewReportId').value;
            const reportStatus = document.getElementById('reviewStatus').value;
            const reviewComment = document.getElementById('reviewComment').value;
            const qualityScore = document.getElementById('reviewQualityScore').value;
            const efficiencyScore = document.getElementById('reviewEfficiencyScore').value;
            const attitudeScore = document.getElementById('reviewAttitudeScore').value;
            
            if (!reportStatus) {
                alert('请选择审核结果');
                return;
            }
            
            // 这里可以调用API进行审核
            console.log('审核汇报:', reportId, reportStatus, reviewComment, qualityScore, efficiencyScore, attitudeScore);
            
            // 更新本地数据
            const report = reportData.find(r => r.id == reportId);
            if (report) {
                report.reportStatus = parseInt(reportStatus);
                report.reviewComment = reviewComment;
                report.qualityScore = qualityScore ? parseInt(qualityScore) : null;
                report.efficiencyScore = efficiencyScore ? parseInt(efficiencyScore) : null;
                report.attitudeScore = attitudeScore ? parseInt(attitudeScore) : null;
                
                if (qualityScore && efficiencyScore && attitudeScore) {
                    report.overallScore = (parseInt(qualityScore) + parseInt(efficiencyScore) + parseInt(attitudeScore)) / 3.0;
                }
            }
            
            renderReportTable();
            loadReportStats();
            bootstrap.Modal.getInstance(document.getElementById('reviewModal')).hide();
            alert('审核完成！');
        }
        
        // 监督汇报
        function superviseReport(reportId) {
            const supervisionNote = prompt('请输入监督备注:');
            if (supervisionNote) {
                // 这里可以调用API进行监督处理
                console.log('监督汇报:', reportId, supervisionNote);
                alert('监督处理完成！');
                loadReportData(); // 重新加载数据
            }
        }
        
        // 显示创建汇报模态框
        function showCreateReportModal() {
            document.getElementById('reportModalTitle').textContent = '新建任务进度汇报';
            document.getElementById('reportForm').reset();
            document.getElementById('reportId').value = '';
            loadTaskOptions();
            new bootstrap.Modal(document.getElementById('reportModal')).show();
        }
        
        // 加载任务选项
        function loadTaskOptions() {
            const select = document.getElementById('reportTaskId');
            select.innerHTML = '<option value="">请选择任务</option>';
            tasks.forEach(task => {
                const option = document.createElement('option');
                option.value = task.id;
                option.textContent = task.name;
                select.appendChild(option);
            });
        }
        
        // 编辑汇报
        function editReport(reportId) {
            const report = reportData.find(r => r.id === reportId);
            if (report) {
                document.getElementById('reportModalTitle').textContent = '编辑任务进度汇报';
                document.getElementById('reportId').value = report.id;
                document.getElementById('reportTaskId').value = report.taskId;
                document.getElementById('reportType').value = report.reportType;
                document.getElementById('reportTitle').value = report.reportTitle;
                document.getElementById('reportContent').value = report.reportContent;
                document.getElementById('reportProgress').value = report.progress;
                document.getElementById('reportWorkDuration').value = report.workDuration || '';
                document.getElementById('reportWorkMode').value = report.workMode || '';
                document.getElementById('reportWorkResults').value = report.workResults || '';
                document.getElementById('reportProblems').value = report.problems || '';
                document.getElementById('reportSolutions').value = report.solutions || '';
                document.getElementById('reportNextPlan').value = report.nextPlan || '';
                document.getElementById('reportSupportNeeded').value = report.supportNeeded || '';
                document.getElementById('reportWorkLocation').value = report.workLocation || '';
                document.getElementById('reportIsAbnormal').checked = report.isAbnormal || false;
                document.getElementById('reportAbnormalReason').value = report.abnormalReason || '';
                
                // 显示/隐藏异常原因输入框
                const abnormalReasonDiv = document.getElementById('abnormalReasonDiv');
                if (report.isAbnormal) {
                    abnormalReasonDiv.style.display = 'block';
                } else {
                    abnormalReasonDiv.style.display = 'none';
                }
                
                loadTaskOptions();
                new bootstrap.Modal(document.getElementById('reportModal')).show();
            }
        }
        
        // 保存汇报
        function saveReport() {
            const form = document.getElementById('reportForm');
            const formData = new FormData(form);
            
            const reportData = {
                taskId: formData.get('taskId'),
                reportType: formData.get('reportType'),
                reportTitle: formData.get('reportTitle'),
                reportContent: formData.get('reportContent'),
                progress: parseInt(formData.get('progress')),
                workDuration: formData.get('workDuration') ? parseInt(formData.get('workDuration')) : null,
                workMode: formData.get('workMode') ? parseInt(formData.get('workMode')) : null,
                workResults: formData.get('workResults'),
                problems: formData.get('problems'),
                solutions: formData.get('solutions'),
                nextPlan: formData.get('nextPlan'),
                supportNeeded: formData.get('supportNeeded'),
                workLocation: formData.get('workLocation'),
                isAbnormal: formData.get('isAbnormal') === 'on',
                abnormalReason: formData.get('abnormalReason')
            };
            
            const reportId = document.getElementById('reportId').value;
            
            if (reportId) {
                // 编辑模式
                const index = reportData.findIndex(r => r.id == reportId);
                if (index !== -1) {
                    reportData[index] = { ...reportData[index], ...reportData };
                }
            } else {
                // 新增模式
                const newReport = {
                    id: reportData.length + 1,
                    employeeId: 1, // 假设当前用户ID为1
                    employeeName: '当前用户',
                    taskName: tasks.find(t => t.id == reportData.taskId)?.name || '',
                    reportStatus: 1, // 默认待审核状态
                    createTime: new Date().toISOString().split('T')[0] + ' ' + new Date().toTimeString().split(' ')[0],
                    ...reportData
                };
                reportData.push(newReport);
            }
            
            renderReportTable();
            loadReportStats();
            bootstrap.Modal.getInstance(document.getElementById('reportModal')).hide();
            alert('保存成功！');
        }
        
        // 删除汇报
        function deleteReport(reportId) {
            if (confirm('确定要删除这个汇报吗？')) {
                reportData = reportData.filter(r => r.id !== reportId);
                renderReportTable();
                loadReportStats();
                alert('删除成功！');
            }
        }
        
        // 显示待审核汇报
        function showPendingReports() {
            const pendingData = reportData.filter(r => r.reportStatus === 1);
            if (pendingData.length === 0) {
                alert('暂无待审核汇报');
                return;
            }
            
            let pendingHtml = '待审核汇报:\n\n';
            pendingData.forEach(report => {
                pendingHtml += `${report.taskName} - ${report.employeeName} - ${report.reportTitle}\n`;
            });
            
            alert(pendingHtml);
        }
        
        // 显示异常汇报
        function showAbnormalReports() {
            const abnormalData = reportData.filter(r => r.isAbnormal);
            if (abnormalData.length === 0) {
                alert('暂无异常汇报');
                return;
            }
            
            let abnormalHtml = '异常汇报:\n\n';
            abnormalData.forEach(report => {
                abnormalHtml += `${report.taskName} - ${report.employeeName} - ${report.abnormalReason}\n`;
            });
            
            alert(abnormalHtml);
        }
        
        // 显示汇报统计
        function showReportStats() {
            alert('汇报统计功能开发中...');
        }
        
        // 监听异常汇报复选框变化
        document.addEventListener('DOMContentLoaded', function() {
            const abnormalCheckbox = document.getElementById('reportIsAbnormal');
            const abnormalReasonDiv = document.getElementById('abnormalReasonDiv');
            
            if (abnormalCheckbox && abnormalReasonDiv) {
                abnormalCheckbox.addEventListener('change', function() {
                    if (this.checked) {
                        abnormalReasonDiv.style.display = 'block';
                    } else {
                        abnormalReasonDiv.style.display = 'none';
                    }
                });
            }
        });

        // ========== 员工考勤管理功能 ==========
        
        // 考勤数据
        let attendanceData = [];
        let currentAttendancePage = 1;
        const attendancePageSize = 10;
        
        // 加载考勤数据
        async function loadAttendanceData() {
            try {
                const response = await fetch('/api/attendance/all?page=' + currentAttendancePage + '&size=' + attendancePageSize);
                const result = await response.json();
                
                if (result.code === 200) {
                    attendanceData = result.data;
                    renderAttendanceTable();
                    loadAttendanceStats();
                } else {
                    console.error('加载考勤数据失败:', result.message);
                    // 使用假数据
                    loadMockAttendanceData();
                }
            } catch (error) {
                console.error('加载考勤数据失败:', error);
                // 使用假数据
                loadMockAttendanceData();
            }
        }
        
        // 加载假考勤数据
        function loadMockAttendanceData() {
            attendanceData = [
                {
                    id: 1,
                    employeeId: 1,
                    employeeName: '张三',
                    attendanceDate: '2024-01-15',
                    clockInTime: '2024-01-15 09:00:00',
                    clockOutTime: '2024-01-15 18:00:00',
                    workDuration: 540,
                    workMode: 1,
                    workLocation: '办公室A区',
                    attendanceStatus: 1,
                    isAbnormal: false
                },
                {
                    id: 2,
                    employeeId: 1,
                    employeeName: '张三',
                    attendanceDate: '2024-01-16',
                    clockInTime: '2024-01-16 09:15:00',
                    clockOutTime: '2024-01-16 17:45:00',
                    workDuration: 510,
                    workMode: 1,
                    workLocation: '办公室A区',
                    attendanceStatus: 2,
                    lateMinutes: 15,
                    earlyMinutes: 15,
                    isAbnormal: true,
                    abnormalReason: '迟到15分钟，早退15分钟'
                },
                {
                    id: 3,
                    employeeId: 2,
                    employeeName: '李四',
                    attendanceDate: '2024-01-15',
                    clockInTime: '2024-01-15 09:05:00',
                    clockOutTime: '2024-01-15 18:10:00',
                    workDuration: 545,
                    workMode: 1,
                    workLocation: '办公室B区',
                    attendanceStatus: 2,
                    lateMinutes: 5,
                    isAbnormal: true,
                    abnormalReason: '迟到5分钟'
                },
                {
                    id: 4,
                    employeeId: 3,
                    employeeName: '王五',
                    attendanceDate: '2024-01-15',
                    clockInTime: '2024-01-15 09:00:00',
                    clockOutTime: '2024-01-15 18:00:00',
                    workDuration: 540,
                    workMode: 2,
                    workLocation: '家中',
                    attendanceStatus: 1,
                    isAbnormal: false
                },
                {
                    id: 5,
                    employeeId: 4,
                    employeeName: '赵六',
                    attendanceDate: '2024-01-15',
                    clockInTime: '2024-01-15 09:20:00',
                    clockOutTime: '2024-01-15 18:00:00',
                    workDuration: 520,
                    workMode: 1,
                    workLocation: '办公室D区',
                    attendanceStatus: 2,
                    lateMinutes: 20,
                    isAbnormal: true,
                    abnormalReason: '迟到20分钟'
                }
            ];
            renderAttendanceTable();
            loadAttendanceStats();
        }
        
        // 渲染考勤表格
        function renderAttendanceTable() {
            const tbody = document.getElementById('attendanceTableBody');
            tbody.innerHTML = '';
            
            attendanceData.forEach(attendance => {
                const row = document.createElement('tr');
                const statusClass = getAttendanceStatusClass(attendance.attendanceStatus);
                const workModeText = getWorkModeText(attendance.workMode);
                
                row.innerHTML = `
                    <td>${attendance.employeeName}</td>
                    <td>${attendance.attendanceDate}</td>
                    <td>${attendance.clockInTime ? attendance.clockInTime.split(' ')[1] : '-'}</td>
                    <td>${attendance.clockOutTime ? attendance.clockOutTime.split(' ')[1] : '-'}</td>
                    <td>${attendance.workDuration ? Math.floor(attendance.workDuration / 60) + '小时' + (attendance.workDuration % 60) + '分钟' : '-'}</td>
                    <td>${workModeText}</td>
                    <td><span class="badge ${statusClass}">${getAttendanceStatusText(attendance.attendanceStatus)}</span></td>
                    <td>${attendance.workLocation || '-'}</td>
                    <td>
                        <button class="btn btn-outline-info btn-sm" onclick="viewAttendanceDetail(${attendance.id})" title="查看详情">
                            <i class="bi bi-eye"></i>
                        </button>
                        ${attendance.isAbnormal ? `
                            <button class="btn btn-outline-warning btn-sm" onclick="superviseAttendance(${attendance.id})" title="监督处理">
                                <i class="bi bi-shield-check"></i>
                            </button>
                        ` : ''}
                    </td>
                `;
                tbody.appendChild(row);
            });
        }
        
        // 获取考勤状态样式类
        function getAttendanceStatusClass(status) {
            switch (status) {
                case 1: return 'bg-success'; // 正常
                case 2: return 'bg-warning'; // 迟到
                case 3: return 'bg-info';    // 早退
                case 4: return 'bg-danger'; // 缺勤
                case 5: return 'bg-secondary'; // 请假
                default: return 'bg-secondary';
            }
        }
        
        // 获取考勤状态文本
        function getAttendanceStatusText(status) {
            switch (status) {
                case 1: return '正常';
                case 2: return '迟到';
                case 3: return '早退';
                case 4: return '缺勤';
                case 5: return '请假';
                default: return '未知';
            }
        }
        
        // 获取工作模式文本
        function getWorkModeText(mode) {
            switch (mode) {
                case 1: return '办公室';
                case 2: return '远程';
                case 3: return '混合';
                default: return '未知';
            }
        }
        
        // 加载考勤统计
        function loadAttendanceStats() {
            const totalAttendance = attendanceData.length;
            const normalAttendance = attendanceData.filter(a => a.attendanceStatus === 1).length;
            const abnormalAttendance = attendanceData.filter(a => a.isAbnormal).length;
            const attendanceRate = totalAttendance > 0 ? Math.round((normalAttendance / totalAttendance) * 100) : 0;
            
            document.getElementById('totalAttendance').textContent = totalAttendance;
            document.getElementById('normalAttendance').textContent = normalAttendance;
            document.getElementById('abnormalAttendance').textContent = abnormalAttendance;
            document.getElementById('attendanceRate').textContent = attendanceRate + '%';
        }
        
        // 查看考勤详情
        function viewAttendanceDetail(attendanceId) {
            const attendance = attendanceData.find(a => a.id === attendanceId);
            if (attendance) {
                let detailHtml = `
                    <div class="attendance-detail">
                        <h6>考勤详情</h6>
                        <p><strong>员工姓名:</strong> ${attendance.employeeName}</p>
                        <p><strong>考勤日期:</strong> ${attendance.attendanceDate}</p>
                        <p><strong>上班时间:</strong> ${attendance.clockInTime || '未打卡'}</p>
                        <p><strong>下班时间:</strong> ${attendance.clockOutTime || '未打卡'}</p>
                        <p><strong>工作时长:</strong> ${attendance.workDuration ? Math.floor(attendance.workDuration / 60) + '小时' + (attendance.workDuration % 60) + '分钟' : '-'}</p>
                        <p><strong>工作模式:</strong> ${getWorkModeText(attendance.workMode)}</p>
                        <p><strong>工作地点:</strong> ${attendance.workLocation || '-'}</p>
                        <p><strong>考勤状态:</strong> <span class="badge ${getAttendanceStatusClass(attendance.attendanceStatus)}">${getAttendanceStatusText(attendance.attendanceStatus)}</span></p>
                `;
                
                if (attendance.isAbnormal) {
                    detailHtml += `
                        <p><strong>异常原因:</strong> ${attendance.abnormalReason || '-'}</p>
                        <p><strong>迟到时长:</strong> ${attendance.lateMinutes || 0} 分钟</p>
                        <p><strong>早退时长:</strong> ${attendance.earlyMinutes || 0} 分钟</p>
                    `;
                }
                
                detailHtml += '</div>';
                
                alert(detailHtml.replace(/<[^>]*>/g, '')); // 简单显示，去掉HTML标签
            }
        }
        
        // 监督考勤
        function superviseAttendance(attendanceId) {
            const supervisionNote = prompt('请输入监督备注:');
            if (supervisionNote) {
                // 这里可以调用API进行监督处理
                console.log('监督考勤:', attendanceId, supervisionNote);
                alert('监督处理完成！');
                loadAttendanceData(); // 重新加载数据
            }
        }
        
        // 显示考勤统计
        function showAttendanceStats() {
            alert('考勤统计功能开发中...');
        }
        
        // 显示异常考勤
        function showAbnormalAttendance() {
            const abnormalData = attendanceData.filter(a => a.isAbnormal);
            if (abnormalData.length === 0) {
                alert('暂无异常考勤记录');
                return;
            }
            
            let abnormalHtml = '异常考勤记录:\n\n';
            abnormalData.forEach(attendance => {
                abnormalHtml += `${attendance.employeeName} - ${attendance.attendanceDate} - ${attendance.abnormalReason}\n`;
            });
            
            alert(abnormalHtml);
        }
        
        // 导出考勤
        function exportAttendance() {
            alert('导出考勤功能开发中...');
        }
        
        // 页面加载完成后初始化
        document.addEventListener('DOMContentLoaded', function() {
            loadTeamMembers();
            loadTasks();
            loadWorkStatusData(); // 加载工作状态数据
            loadAttendanceData(); // 加载考勤数据
            loadReportData(); // 加载任务进度汇报数据
        });

        // 加载团队成员
        function loadTeamMembers() {
            const container = document.getElementById('teamMembersList');
            container.innerHTML = '';

            teamMembers.forEach(member => {
                const memberCard = document.createElement('div');
                memberCard.className = 'team-member-card';
                
                const workModeText = getWorkModeText(member.workMode);
                const onlineStatusClass = getOnlineStatusClass(member.onlineStatus);
                const onlineStatusText = getOnlineStatusText(member.onlineStatus);
                
                memberCard.innerHTML = `
                    <div class="member-avatar">
                        <img src="${member.avatar}" alt="${member.name}" onerror="this.src='https://via.placeholder.com/40'">
                        <div class="online-indicator ${onlineStatusClass}"></div>
                    </div>
                    <div class="member-info">
                        <h6 class="member-name">${member.name}</h6>
                        <p class="member-position">${member.position}</p>
                        <p class="member-department">${member.department}</p>
                        <div class="member-status">
                            <span class="badge ${onlineStatusClass} me-1">${onlineStatusText}</span>
                            <span class="badge bg-info">${workModeText}</span>
                        </div>
                        <small class="text-muted">时区: ${member.timezone}</small>
                    </div>
                    <div class="member-actions">
                        <div class="btn-group-vertical" role="group">
                            <button class="btn btn-outline-primary btn-sm" onclick="editMember(${member.id})" title="编辑">
                                <i class="bi bi-pencil"></i>
                            </button>
                            <button class="btn btn-outline-success btn-sm" onclick="updateMemberOnlineStatus(${member.id}, 1)" title="设为在线">
                                <i class="bi bi-circle-fill"></i>
                            </button>
                            <button class="btn btn-outline-warning btn-sm" onclick="updateMemberOnlineStatus(${member.id}, 2)" title="设为忙碌">
                                <i class="bi bi-clock"></i>
                            </button>
                            <button class="btn btn-outline-danger btn-sm" onclick="deleteMember(${member.id})" title="删除">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </div>
                `;
                container.appendChild(memberCard);
            });
        }

        // 获取工作模式文本
        function getWorkModeText(workMode) {
            switch (workMode) {
                case 1: return '办公室';
                case 2: return '远程';
                case 3: return '混合';
                default: return '未知';
            }
        }

        // 加载任务列表
        function loadTasks() {
            const tbody = document.getElementById('taskTableBody');
            tbody.innerHTML = '';

            let filteredTasks = tasks;
            if (currentTaskFilter !== 'all') {
                filteredTasks = tasks.filter(task => {
                    switch (currentTaskFilter) {
                        case 'pending':
                            return task.status === 'pending';
                        case 'completed':
                            return task.status === 'completed';
                        default:
                            return true;
                    }
                });
            }

            filteredTasks.forEach(task => {
                const row = document.createElement('tr');
                const priorityClass = getPriorityClass(task.priority);
                const statusClass = getStatusClass(task.status);
                
                row.innerHTML = `
                    <td class="table-cell-truncate" title="${task.name}">${task.name}</td>
                    <td class="table-cell-truncate" title="${task.assignee}">${task.assignee}</td>
                    <td><span class="badge ${priorityClass}">${getPriorityText(task.priority)}</span></td>
                    <td><span class="badge ${statusClass}">${getStatusText(task.status)}</span></td>
                    <td class="table-cell-truncate" title="${task.dueDate}">${task.dueDate}</td>
                    <td>
                        <div class="progress" style="height: 20px;">
                            <div class="progress-bar" role="progressbar" style="width: ${task.progress}%">${task.progress}%</div>
                        </div>
                    </td>
                    <td>
                        <button class="btn btn-outline-success btn-sm" onclick="completeTask(${task.id})" title="标记完成">
                            <i class="bi bi-check"></i>
                        </button>
                        <button class="btn btn-outline-warning btn-sm" onclick="editTask(${task.id})" title="编辑">
                            <i class="bi bi-pencil"></i>
                        </button>
                        <button class="btn btn-outline-danger btn-sm" onclick="deleteTask(${task.id})" title="删除">
                            <i class="bi bi-trash"></i>
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        // 筛选任务
        function filterTasks(filter) {
            currentTaskFilter = filter;
            loadTasks();
        }

        // 显示添加成员模态框
        function showAddMemberModal() {
            document.getElementById('memberModalTitle').textContent = '添加成员';
            document.getElementById('memberForm').reset();
            document.getElementById('memberId').value = '';
            new bootstrap.Modal(document.getElementById('memberModal')).show();
        }

        // 编辑成员
        function editMember(id) {
            const member = teamMembers.find(m => m.id === id);
            if (member) {
                document.getElementById('memberModalTitle').textContent = '编辑成员';
                document.getElementById('memberId').value = member.id;
                document.getElementById('memberName').value = member.name;
                document.getElementById('memberPosition').value = member.position;
                document.getElementById('memberEmail').value = member.email;
                document.getElementById('memberPhone').value = member.phone;
                document.getElementById('memberDepartment').value = member.department;
                document.getElementById('memberRole').value = member.role;
                new bootstrap.Modal(document.getElementById('memberModal')).show();
            }
        }

        // 保存成员
        function saveMember() {
            const form = document.getElementById('memberForm');
            const formData = new FormData(form);
            
            const memberData = {
                name: formData.get('name'),
                position: formData.get('position'),
                email: formData.get('email'),
                phone: formData.get('phone'),
                department: formData.get('department'),
                role: formData.get('role'),
                avatar: 'https://via.placeholder.com/40'
            };

            const memberId = document.getElementById('memberId').value;
            
            if (memberId) {
                // 编辑模式
                const index = teamMembers.findIndex(m => m.id == memberId);
                if (index !== -1) {
                    teamMembers[index] = { ...teamMembers[index], ...memberData };
                }
            } else {
                // 新增模式
                const newMember = {
                    id: teamMembers.length + 1,
                    ...memberData
                };
                teamMembers.push(newMember);
            }

            loadTeamMembers();
            bootstrap.Modal.getInstance(document.getElementById('memberModal')).hide();
            alert('保存成功！');
        }

        // 删除成员
        function deleteMember(id) {
            if (confirm('确定要删除这个成员吗？')) {
                teamMembers = teamMembers.filter(m => m.id !== id);
                loadTeamMembers();
                alert('删除成功！');
            }
        }

        // 显示添加任务模态框
        function showAddTaskModal() {
            document.getElementById('taskModalTitle').textContent = '新建任务';
            document.getElementById('taskForm').reset();
            document.getElementById('taskId').value = '';
            loadAssigneeOptions();
            new bootstrap.Modal(document.getElementById('taskModal')).show();
        }

        // 加载负责人选项
        function loadAssigneeOptions() {
            const select = document.getElementById('taskAssignee');
            select.innerHTML = '<option value="">请选择负责人</option>';
            teamMembers.forEach(member => {
                const option = document.createElement('option');
                option.value = member.name;
                option.textContent = member.name;
                select.appendChild(option);
            });
        }

        // 编辑任务
        function editTask(id) {
            const task = tasks.find(t => t.id === id);
            if (task) {
                document.getElementById('taskModalTitle').textContent = '编辑任务';
                document.getElementById('taskId').value = task.id;
                document.getElementById('taskName').value = task.name;
                document.getElementById('taskAssignee').value = task.assignee;
                document.getElementById('taskPriority').value = task.priority;
                document.getElementById('taskDueDate').value = task.dueDate;
                document.getElementById('taskDescription').value = task.description || '';
                document.getElementById('taskProgress').value = task.progress;
                loadAssigneeOptions();
                new bootstrap.Modal(document.getElementById('taskModal')).show();
            }
        }

        // 保存任务
        function saveTask() {
            const form = document.getElementById('taskForm');
            const formData = new FormData(form);
            
            const taskData = {
                name: formData.get('name'),
                assignee: formData.get('assignee'),
                priority: formData.get('priority'),
                dueDate: formData.get('dueDate'),
                description: formData.get('description'),
                progress: parseInt(formData.get('progress')) || 0,
                status: parseInt(formData.get('progress')) === 100 ? 'completed' : 'pending'
            };

            const taskId = document.getElementById('taskId').value;
            
            if (taskId) {
                // 编辑模式
                const index = tasks.findIndex(t => t.id == taskId);
                if (index !== -1) {
                    tasks[index] = { ...tasks[index], ...taskData };
                }
            } else {
                // 新增模式
                const newTask = {
                    id: tasks.length + 1,
                    ...taskData
                };
                tasks.push(newTask);
            }

            loadTasks();
            bootstrap.Modal.getInstance(document.getElementById('taskModal')).hide();
            alert('保存成功！');
        }

        // 完成任务
        function completeTask(id) {
            const task = tasks.find(t => t.id === id);
            if (task) {
                task.status = 'completed';
                task.progress = 100;
                loadTasks();
                alert('任务已完成！');
            }
        }

        // 删除任务
        function deleteTask(id) {
            if (confirm('确定要删除这个任务吗？')) {
                tasks = tasks.filter(t => t.id !== id);
                loadTasks();
                alert('删除成功！');
            }
        }

        // 导入成员
        function importMembers() {
            alert('导入功能开发中...');
        }

        // 导出成员
        function exportMembers() {
            const dataStr = JSON.stringify(teamMembers, null, 2);
            const dataBlob = new Blob([dataStr], {type: 'application/json'});
            const url = URL.createObjectURL(dataBlob);
            const link = document.createElement('a');
            link.href = url;
            link.download = `members_${new Date().toISOString().split('T')[0]}.json`;
            link.click();
            URL.revokeObjectURL(url);
        }

        // 导入任务
        function importTasks() {
            alert('导入功能开发中...');
        }

        // 导出任务
        function exportTasks() {
            const dataStr = JSON.stringify(tasks, null, 2);
            const dataBlob = new Blob([dataStr], {type: 'application/json'});
            const url = URL.createObjectURL(dataBlob);
            const link = document.createElement('a');
            link.href = url;
            link.download = `tasks_${new Date().toISOString().split('T')[0]}.json`;
            link.click();
            URL.revokeObjectURL(url);
        }

        // 获取优先级样式类
        function getPriorityClass(priority) {
            switch (priority) {
                case 'high': return 'bg-danger';
                case 'medium': return 'bg-warning';
                case 'low': return 'bg-success';
                default: return 'bg-secondary';
            }
        }

        // 获取状态样式类
        function getStatusClass(status) {
            switch (status) {
                case 'pending': return 'bg-warning';
                case 'completed': return 'bg-success';
                default: return 'bg-secondary';
            }
        }

        // 获取优先级文本
        function getPriorityText(priority) {
            switch (priority) {
                case 'high': return '高';
                case 'medium': return '中';
                case 'low': return '低';
                default: return '未知';
            }
        }

        // 获取状态文本
        function getStatusText(status) {
            switch (status) {
                case 'pending': return '进行中';
                case 'completed': return '已完成';
                default: return '未知';
            }
        }

        // ========== 远程办公相关函数 ==========

        // 显示创建会议模态框
        function showCreateMeetingModal() {
            document.getElementById('meetingModalTitle').textContent = '创建远程会议';
            document.getElementById('meetingForm').reset();
            document.getElementById('meetingId').value = '';
            loadParticipants();
            new bootstrap.Modal(document.getElementById('meetingModal')).show();
        }

        // 加载参会人员选项
        function loadParticipants() {
            const container = document.getElementById('participantList');
            container.innerHTML = '';
            
            teamMembers.forEach(member => {
                const participantDiv = document.createElement('div');
                participantDiv.className = 'participant-item d-flex justify-content-between align-items-center mb-2';
                participantDiv.innerHTML = `
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="participant_${member.id}" value="${member.id}">
                        <label class="form-check-label" for="participant_${member.id}">
                            <img src="${member.avatar}" alt="${member.name}" class="rounded-circle me-2" width="24" height="24">
                            ${member.name} (${member.position})
                            <span class="badge ${getOnlineStatusClass(member.onlineStatus)} ms-2">${getOnlineStatusText(member.onlineStatus)}</span>
                        </label>
                    </div>
                `;
                container.appendChild(participantDiv);
            });
        }

        // 获取在线状态样式类
        function getOnlineStatusClass(status) {
            switch (status) {
                case 1: return 'bg-success'; // 在线
                case 2: return 'bg-warning'; // 忙碌
                case 3: return 'bg-info';    // 离开
                case 4: return 'bg-secondary'; // 离线
                default: return 'bg-secondary';
            }
        }

        // 获取在线状态文本
        function getOnlineStatusText(status) {
            switch (status) {
                case 1: return '在线';
                case 2: return '忙碌';
                case 3: return '离开';
                case 4: return '离线';
                default: return '未知';
            }
        }

        // 保存会议
        function saveMeeting() {
            const form = document.getElementById('meetingForm');
            const formData = new FormData(form);
            
            // 获取选中的参会人员
            const participants = [];
            const checkboxes = document.querySelectorAll('#participantList input[type="checkbox"]:checked');
            checkboxes.forEach(checkbox => {
                const member = teamMembers.find(m => m.id == checkbox.value);
                if (member) {
                    participants.push(member.name);
                }
            });

            const meetingData = {
                title: formData.get('title'),
                type: formData.get('type'),
                startTime: formData.get('startTime'),
                duration: formData.get('duration'),
                tool: formData.get('tool'),
                description: formData.get('description'),
                record: formData.get('record') === 'on',
                participants: participants
            };

            // 这里可以调用API保存会议
            console.log('会议数据:', meetingData);
            
            bootstrap.Modal.getInstance(document.getElementById('meetingModal')).hide();
            alert('会议创建成功！');
        }

        // 打开视频会议
        function openVideoMeeting() {
            alert('正在打开视频会议工具...');
        }

        // 打开聊天
        function openChat() {
            alert('正在打开即时通讯工具...');
        }

        // 打开文档协作
        function openDocument() {
            alert('正在打开文档协作工具...');
        }

        // 打开项目管理
        function openProjectManagement() {
            alert('正在打开项目管理工具...');
        }

        // 显示在线成员
        function showOnlineMembers() {
            const onlineMembers = teamMembers.filter(member => member.onlineStatus === 1);
            let message = '在线成员：\n';
            onlineMembers.forEach(member => {
                message += `• ${member.name} (${member.position})\n`;
            });
            alert(message);
        }

        // 显示远程工具
        function showRemoteTools() {
            alert('远程办公工具配置功能开发中...');
        }

        // 更新成员在线状态
        function updateMemberOnlineStatus(memberId, status) {
            const member = teamMembers.find(m => m.id === memberId);
            if (member) {
                member.onlineStatus = status;
                member.lastOnlineTime = new Date();
                loadTeamMembers();
            }
        }

        // 更新成员工作模式
        function updateMemberWorkMode(memberId, workMode) {
            const member = teamMembers.find(m => m.id === memberId);
            if (member) {
                member.workMode = workMode;
                loadTeamMembers();
            }
        }
    </script>
</body>
</html>